// 任务描述
// 本关任务：插入排序的递归实现

// 一个数组有n个元素，假如前面n-1个元素已经排序好了，那么把第n个元素插入到前面n-1个元素中，使得数组有序排列，就是插入排序了。
// 至于n-1个元素如何已经先排序好，那么我们可以假设前面n-2个元素已经排序好，把第n-1个元素插入到前面n-2个元素中。
// 依次类推，直到只剩下一个元素，也就是第一个元素。排序完成。
// void Insert_Sort(int A[],int n)
// {
//     if(n>1)
//     {
//         Insert_Sort(A,n-1);//递归将前面n-1个元素排序
//         //你的代码，把第n个元素插入到前面n-1个元素中
//     }
//     //递归的出口是n=1，无需做任何操作
// }

// 编程要求
// 根据提示，在右侧编辑器补充代码，先输入数组元素的个数，再输入数组元素，输出排序后的数组元素。测试样例数组长度范围为1~1000，输入数组限整数。

// 测试说明
// 平台会对你编写的代码进行测试：

// 测试输入：4 2 3 1 4
// 预期输出：
// 1 2 3 4
 #include<iostream>
using namespace std;

void Insert_Sort(int* p,int n)
 {
    if(n>0)
    {
        Insert_Sort(p,n-1); //递归将前面n-1个元素排序好
        // 你的代码，把第n个元素插入到前面n-1个元素中
        for(int i = 0; i < n; i++){
            if(*(p + n) > *(p + i - 1) && *(p + n) <= *(p + i)){
                int nTemp = *(p + n);
                for(int j = n; j > i; j--){
                    *(p + j) = *(p + j - 1);
                }
                *(p + i) = nTemp;
                break;
            }
        }
    }
}

int main()
{
    int n, num[1000];
    cin>>n;
    
    // 你的代码
    for(int i = 0; i < n; i++){
        cin>>num[i];
    }

    Insert_Sort(num, n - 1);

    for(int i = 0; i < n; i++){
        cout<<num[i] << ' ';
    }
	return 0;
}